unit untOutgoingData;

interface

uses DateUtils, sysutils, untUtils;

type
  OutgoingDataErrors = (ERROR_NoError = 0);
  PByte = ^Byte;

type
  TOutgoingData = class
  private
    bPilotSymbol: Byte;
    bCommandLength: Byte;
    wSubstationAddress: Word;
    bCommandType: Byte;
    dtDateTime: TDateTime;
    wYear, wMonth, wDay, wHour, wMinute, wSecond, wMs: Word;
    bolClearCommEquipment: boolean;
    bolClearIntterupt: boolean;
    bolOutgoingData: boolean;
    bolClearLastRecord: boolean;
    bMaxNumberPeople: Byte;
    bAlarm: Byte;
    bWarning: Byte;
    bOtherCommands: Byte;
    bHighRandomCode, bLowRandomCode: Byte;
    bCRC16H: Byte;
    bCRC16L: Byte;
    bolTakeDateFromMe: boolean;
  public
    property PilotSymbol: Byte read bPilotSymbol write bPilotSymbol;
    property CommandLength: Byte read bCommandLength write bCommandLength;
    property SubStationAddress: Word read wSubstationAddress
      write wSubstationAddress;
    property CommandType: Byte read bCommandType write bCommandType;
    property ClearCommunicationDevice: boolean read bolClearCommEquipment
      write bolClearCommEquipment;
    property ClearIntterupts: boolean read bolClearIntterupt
      write bolClearIntterupt;
    property OutgoingData: boolean read bolOutgoingData write bolOutgoingData;
    property ClearLastRecords: boolean read bolClearLastRecord
      write bolClearLastRecord;
    property MaxNumberPeopleReading: Byte read bMaxNumberPeople
      write bMaxNumberPeople;
    property Alarm: Byte read bAlarm write bAlarm;
    property Warning: Byte read bWarning write bWarning;
    property OtherCommands: Byte read bOtherCommands write bOtherCommands;
    property DateTime: TDateTime read dtDateTime write dtDateTime;
    property TakeDateTimeFromMe: boolean read bolTakeDateFromMe
      write bolTakeDateFromMe;

    constructor Create;
    function CreateFrame(var Buffer: ByteArray): OutgoingDataErrors;
  end;

implementation

{ TOutgoingData }

constructor TOutgoingData.Create;
begin
  bPilotSymbol := $7E;
  bCommandType := $46;
  bCommandLength := 0;
  wSubstationAddress := 1;
  dtDateTime := Now;
  bolClearCommEquipment := false;
  bolClearIntterupt := false;
  bolOutgoingData := false;
  bolClearLastRecord := false;
  bMaxNumberPeople := 15;
  bAlarm := 0;
  bWarning := 0;
  bOtherCommands := 0;
  bHighRandomCode := 0;
  bLowRandomCode := 0;
  bCRC16H := 0;
  bCRC16L := 0;
  bolTakeDateFromMe := false;
end;

function TOutgoingData.CreateFrame(var Buffer: ByteArray): OutgoingDataErrors;

var
  bDeviceSettings: Byte;

begin
  if (bCommandType = $46) then
  begin

    if (bolTakeDateFromMe) then
      DecodeDateTime(dtDateTime, wYear, wMonth, wDay, wHour, wMinute,
        wSecond, wMs)
    else
      DecodeDateTime(Now, wYear, wMonth, wDay, wHour, wMinute, wSecond, wMs);

    bDeviceSettings := 0;

    if (bolClearCommEquipment) then
      bDeviceSettings := bDeviceSettings or $01;
    if (bolClearIntterupt) then
      bDeviceSettings := bDeviceSettings or $02;
    if (bolOutgoingData) then
      bDeviceSettings := bDeviceSettings or $04;
    if (bolClearLastRecord) then
      bDeviceSettings := bDeviceSettings or $80;

    SetLength(Buffer, 19);

    Buffer[0] := bPilotSymbol;
    Buffer[1] := $13; //Command Length
    Buffer[2] := wSubstationAddress div 256;
    Buffer[3] := wSubstationAddress mod 256;
    Buffer[4] := bCommandType;
    Buffer[5] := wYear - 2000;
    Buffer[6] := wMonth;
    Buffer[7] := wDay;
    Buffer[8] := wHour;
    Buffer[9] := wMinute;
    Buffer[10] := wSecond;
    Buffer[11] := bDeviceSettings;
    Buffer[12] := bMaxNumberPeople;
    Buffer[13] := bAlarm;
    Buffer[14] := bWarning;
    Buffer[15] := $00;
    Buffer[16] := $00;

    Crc16_ver(Buffer);
  end;

end;

end.
